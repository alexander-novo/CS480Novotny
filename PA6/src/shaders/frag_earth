#version 330 core

// Interpolated values from the vertex shaders
in vec2 uvCoord;
in vec3 positionW;
in vec3 normalC;
in vec3 eyeC;
in vec3 lightDirC;

// Output data
out vec3 frag_color;

// Values that stay constant for the whole mesh.
uniform mat4 modelMatrix;
uniform mat4 viewMatrix;

uniform vec3 MaterialDiffuseColor;
uniform vec3 MaterialAmbientColor;
uniform vec3 MaterialSpecularColor;

uniform float lightPower;

uniform sampler2D gSampler;
uniform sampler2D gAltSampler;

void main(void) {
    //Where the light is in the world
    vec3 lightW = vec3(0.0, 0.0, 0.0);
    //What color
    vec3 lightColor = vec3(1.0, 1.0, 1.0);

    // Normal of the computed fragment, in camera space
    vec3 n = normalize( normalC );
    // Direction of the light (from the fragment to the light)
    vec3 l = normalize( lightDirC );

    // Cosine of the angle between the normal and the light direction
    // clamped to a minimum of 0
    // Anything facing directly towards the light will shine the brightest
    // and anything facing away will be black
    float cosTheta = dot( n,l );

    //How far away we are - light depends on distance
    float distance = length(lightW - positionW);

    if(cosTheta > -0.05) {
        vec3 MaterialDiffuseTexture2d = texture2D(gSampler, uvCoord.st).xyz;

        //Start with a basis of the diffuse color. This will later become our texture
        vec3 materialAmbientModified = (MaterialAmbientColor) * MaterialDiffuseTexture2d;

        // Eye vector (towards the camera)
        vec3 E = normalize(eyeC);
        // Direction in which the triangle reflects the light
        vec3 R = reflect(-l,n);
        // Cosine of the angle between the Eye vector and the Reflect vector,
        // clamped to 0
        //  - Looking into the reflection -> 1
        //  - Looking elsewhere -> < 1
        float cosAlpha = clamp( dot( E,R ), 0,1 );

        frag_color =
            // Ambient : simulates indirect lighting
            materialAmbientModified +
            // Diffuse : "color" of the object
            MaterialDiffuseTexture2d * lightColor * lightPower * abs(cosTheta) / distance +
            // Specular : reflective highlight, like a mirror
            MaterialSpecularColor * lightColor * lightPower * pow(cosAlpha,5) / distance;

        if(cosTheta <= 0.05) {
            cosTheta += 0.05;
            cosTheta *= 10;

            frag_color *= cosTheta;
            frag_color += texture2D(gAltSampler, uvCoord.st).xyz * (1 - cosTheta);
        }
    }  else {
        frag_color = texture2D(gAltSampler, uvCoord.st).xyz;
    }
}

